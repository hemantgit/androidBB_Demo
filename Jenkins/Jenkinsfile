// product && ios
node('master') {
    try {
        def version = ""
        def oldVersion = ""

        stage("Checkout") {
            checkout scm
        }

        stage("Preparation") {
            // does it copy the artifact somehow?
            step([
                $class: 'CopyArtifact',
                filter: 'sdk/backbase-mobile-android*.zip',
                fingerprintArtifacts: true,
                projectName: 'CXP-Android/master',
                target: 'Jenkins'
            ])

            // get version
            version = sh returnStdout:true, script: "ls Jenkins/sdk/ | sort -r | head -n1 | sed -e 's/backbase-mobile-android-\\(.*\\).zip/\\1/g'"
            version = version.trim()

            oldVersion = sh returnStdout:true, script: "ls | grep backbase- | sed -e 's/backbase-\\(.*\\)/\\1/g'"
            oldVersion = oldVersion.trim()

            // extract
            sh "cd Jenkins/sdk/ ; unzip backbase-mobile-android-*.zip; unzip backbase-assets.zip"

            // rename module folder
            sh "mv backbase-${oldVersion} backbase-${version} || echo 'continue'"
            // replace old library with new one
            sh "rm -rf backbase-${version}/*.aar"
            sh "mv Jenkins/sdk/*.aar backbase-${version}/"
            sh "mv backbase-${version}/backbase-*.iml backbase-${version}/backbase-${version}.iml"
            sh "sed -i '' -e 's/backbase-${oldVersion}/backbase-${version}/g' backbase-${version}/backbase-${version}.iml"

            // replace old backbase-assets
            sh "rm -rf app/src/main/assets/backbase/web-sdk-mobile/dist app/src/main/assets/backbase/web-sdk-mobile/html"
            sh "mv Jenkins/sdk/dist app/src/main/assets/backbase/web-sdk-mobile/"
            sh "mv Jenkins/sdk/html app/src/main/assets/backbase/web-sdk-mobile/"

            // do this to any .gradle file
            sh "for gradle in `ls -R */*.gradle`; do sed -i '' -e 's/backbase-${oldVersion}/backbase-${version}/g' \$gradle; done"
            sh "for gradle in `ls -R ./*.gradle`; do sed -i '' -e 's/backbase-${oldVersion}/backbase-${version}/g' \$gradle; done"

            // change project
            sh "sed -i '' -e 's/backbase-${oldVersion}/backbase-${version}/g' .idea/gradle.xml"
            sh "sed -i '' -e 's/backbase-${oldVersion}/backbase-${version}/g' .idea/modules.xml"

            // change app version
            def versionCode = sh returnStdout:true, script:"cat app/build.gradle | grep versionCode | sed -e 's/versionCode \\(.*\\)/\\1/g'"
            versionCode = versionCode.trim().toInteger() + 1

            sh "sed -i '' -e 's/versionName \"${oldVersion}\"/versionName \"${version}\"/g' app/build.gradle"
            sh "sed -i '' -e 's/versionCode \\(.*\\)/versionCode ${versionCode}/g' app/build.gradle"
        }

        stage("Build") {
            // remove unnecessary files
            sh "rm -rf Jenkins/sdk"

            // build
            sh "./gradlew clean build"

            // create zip with the content to push
            sh "zip -yr -qq backbase-mobile-android-demo-app-${version}.zip . -x *Jenkins* -x app/build/**\\* -x *.git* -x .DS_Store"
        }

        stage("Publish") {
            def targets = [
                "artifacts": {
                    sh "git clone https://stash.backbase.com/scm/sdk-ext/jenkins-pipeline-utils.git Jenkins/pipeline-utils"
                    def artifactory = load "Jenkins/pipeline-utils/artifactory-api.groovy"
                    artifactory.publish('artifacts.backbase.com', 'backbase-mobile-android-demo-app-*.zip', 'mobile/android/demo-app/')
                },
                "hockeyapp": {
                    step([
                        $class: 'HockeyappRecorder',
                        applications: [
                            [
                                downloadAllowed: false,
                                filePath: 'app/build/outputs/apk/app-debug.apk',
                                mandatory: false,
                                notifyTeam: false,
                                releaseNotesMethod: [$class: 'NoReleaseNotes'],
                                uploadMethod: [$class: 'AppCreation', publicPage: false]
                            ]
                        ],
                        debugMode: false,
                        failGracefully: false
                    ])
                }
            ]

            parallel targets
        }

        stage("Post Build"){
            // archive results
            archive '*.zip,*.apk'
        }

        currentBuild.result = 'SUCCESS'
    } catch (Exception err) {
        currentBuild.result = 'FAILURE'
    }

    // nofify the hipchat room
    def color = (currentBuild.result == 'SUCCESS' ? 'GREEN' : (currentBuild.result == 'UNSTABLE' ? 'YELLOW': 'RED'))

    // send a notification with a randomly picked gif based on the status of the build
    hipchatSend color: color, message: "${env.JOB_NAME} #${env.BUILD_NUMBER} status: ${currentBuild.result} (<a href=\"${env.BUILD_URL}/console\">Open</a>)<br/>"
}
