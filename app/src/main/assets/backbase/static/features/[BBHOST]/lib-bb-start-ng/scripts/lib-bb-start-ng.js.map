{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6*******","webpack:///webpack/bootstrap 2990f54522f565c4fd41?4c34*******","webpack:///./lib-bb-start-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114***","webpack:///external \"lib-bb-event-bus-ng\"?8215","webpack:///./lib-bb-start-ng/scripts/index.js","webpack:///external \"lib-bb-notifications-ng\"","webpack:///external \"lib-bb-widget-ng\"","webpack:///external \"lib-bb-widget\"","webpack:///external \"lib-bb-i18n-ng\"","webpack:///external \"lib-bb-widget-extension-ng\"","webpack:///external \"config-bb-locale\""],"names":["start","widgetKeyProvider","eventBusKeyProvider","translateProvider","createAppModule","widgetName","widgetInstance","dependencyKeys","configs","messages","locale","moduleKey","id","module","config","translate","console","warn","setMessages","widgetProvider","eventBusProvider","setWidget","$injector","forEach","c","providers","annotate","every","has","invoke","name","createExtensionModule","moduleName","extension","value","hooks","run","$filter","eventBus","widget","notifications","context","publish","events","Object","keys","subscribe","event","scope","helpers","ext","extractWidgetName","instanceName","separatorIndex","lastIndexOf","replace","slice","getLocale","getMessageBundleModule","require","widgetInstanceName","model","extendedItemName","Promise","widgetModuleName","getStringPreference","extensionModuleName","requiredModules","widgetModule","configProvidersModule","extensionModule","messageBundleModule","localeModule","filter","key","reduce","ks","vs","concat","dependencyNames","jsModuleNames","args","modules","acc","index","default","push","appModuleKey","bootstrap","body"],"mappings":"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","file":"lib-bb-start-ng/scripts/lib-bb-start-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-notifications-ng\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-widget\"), require(\"lib-bb-i18n-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"config-bb-locale\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"lib-bb-start-ng\", [\"vendor-bb-angular\", \"lib-bb-event-bus-ng\", \"lib-bb-notifications-ng\", \"lib-bb-widget-ng\", \"lib-bb-widget\", \"lib-bb-i18n-ng\", \"lib-bb-widget-extension-ng\", \"config-bb-locale\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lib-bb-start-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-notifications-ng\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-widget\"), require(\"lib-bb-i18n-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"config-bb-locale\"));\n\telse\n\t\troot[\"lib-bb-start-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-notifications-ng\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-widget\"], root[\"lib-bb-i18n-ng\"], root[\"lib-bb-widget-extension-ng\"], root[\"config-bb-locale\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_15__, __WEBPACK_EXTERNAL_MODULE_18__, __WEBPACK_EXTERNAL_MODULE_19__, __WEBPACK_EXTERNAL_MODULE_20__, __WEBPACK_EXTERNAL_MODULE_21__, __WEBPACK_EXTERNAL_MODULE_22__, __WEBPACK_EXTERNAL_MODULE_23__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2990f54522f565c4fd41","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib-bb-start-ng/model.xml\n// module id = 0\n// module chunks = 8","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 5\n// module chunks = 3 4 5 7 8 9 13","module.exports = __WEBPACK_EXTERNAL_MODULE_15__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 15\n// module chunks = 7 8","/**\n * @module lib-bb-start-ng\n *\n * @description Start module for angular apps. Initialises the widget instance, extensions,\n * locales, and translation messages.\n *\n * Usually this module shouldn't be called directly. It will be called by lib-bb-start.\n *\n * Bootstrapping involves the following features:\n *  - Initialises lib-bb-widget instance from CXP widget\n *  - Loads the locale settings from config-bb-locale\n *  - Loads messages file (set from config-bb-locale)\n *  - Provides messages to lib-bb-i18n\n *  - Provides context to widget extensions (helpers, events)\n *  - Makes the extension hooks available to the widget instance\n *  - Loads the widget's JS with the modules looader (configured by config-bb-module-loader)\n *  - Bootstrap the angular application\n *\n * @usage\n * import bbStart from 'lib-bb-start-ng';\n */\n\nimport angular from 'vendor-bb-angular';\n\nimport bbEventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport bbNotificationsModuleKey, { notificationsKey } from 'lib-bb-notifications-ng';\n\nimport bbWidgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport bbWidget from 'lib-bb-widget';\n\nimport bbI18nNgModuleKey, { bbTranslateKey } from 'lib-bb-i18n-ng';\n\nimport { extensionHooksKey } from 'lib-bb-widget-extension-ng';\n\nimport {\n  currentLocale as oldConfigLocale,\n  locale as configLocale,\n  localeModuleName as getLocaleModuleName,\n  messageBundleModuleName as oldConfigMessageBundleModule,\n  messageBundleModule as configMessageBundleModule,\n} from 'config-bb-locale';\n\n// Calculate \"Provider\" keys\nconst widgetKeyProvider = `${widgetKey}Provider`;\nconst eventBusKeyProvider = `${eventBusKey}Provider`;\nconst translateProvider = `${bbTranslateKey}Provider`;\n\n/**\n * Create an Angular Module to combine the Widget, Extension and \"common\" modules\n *\n * Angular modules don't provide proper namespacing. We use this to merge the injectables\n * of the widget, the extension, and any other angular modules. This module also allows\n * configuration of common services that are used by widgets (eg. anything that requires the\n * CXP \"__WIDGET__\" object).\n *\n * @inner\n * @param {string} widgetName The name of the widget\n * @param {WidgetInstance} widgetInstance An instance of the CXP Widget object (__WIDGET__)\n * @param {string[]} dependencyKeys Angular Module Keys this app depends on\n * @param {Array.<NgInjectedFunction>} configs Functions to configure angular providers\n * @param {object.<object.<string>>} messages A map of locale code and translation keys to messages\n * @returns {!string} The Angular Module Key for the App Module\n */\nfunction createAppModule(widgetName, widgetInstance, dependencyKeys, configs, messages, locale) {\n  // Generate an NG Module key including the widget ID to avoid namespace collisions on a page\n  const moduleKey = `${widgetName}:${widgetInstance.id}`;\n\n  return angular\n    .module(moduleKey, [\n      bbWidgetModuleKey,\n      bbEventBusModuleKey,\n      bbI18nNgModuleKey,\n      bbNotificationsModuleKey,\n      ...dependencyKeys,\n    ])\n\n    // configure the translation service with the current language/locale\n    .config([translateProvider, (translate) => {\n      if (!messages) return;\n      if (!messages[locale]) {\n        // eslint-disable-next-line no-console\n        console.warn(`No translations found for locale: \"${locale}\"`);\n        if (messages['en-US']) {\n          // eslint-disable-next-line no-console\n          console.warn('DEPRECATED - Falling back to \"en-US\" translations.\\n'\n                       + 'This fallback is deprecated and you should ensure you have translations '\n                       + 'for the configured locale.');\n          translate.setMessages(messages['en-US']);\n        }\n        return;\n      }\n      translate.setMessages(messages[locale]);\n    }])\n\n    // Configure the `widget` with the current `widgetInstance`\n    .config([widgetKeyProvider, (widgetProvider) => {\n      widgetProvider.config(widgetInstance);\n    }])\n\n    // Configure the `eventBus` with the current `widgetInstance`\n    .config([eventBusKeyProvider, (eventBusProvider) => {\n      eventBusProvider.setWidget(widgetInstance);\n    }])\n\n    // Add a function to configure the angular providers\n    .config(['$injector', ($injector) => {\n      configs.forEach((c) => {\n        // extract the dependencies from the injectable declaration\n        const providers = $injector.annotate(c);\n        // only config the module if the provider exists\n        if (providers.every($injector.has)) {\n          $injector.invoke(c);\n        }\n      });\n    }])\n\n    .name;\n}\n\n/**\n * Create an Angular Module to expose the widgets Extension Module\n *\n * @inner\n * @param {string} moduleName The name of the module to create\n * @param {Object} extension\n * @param {?Array.<string>} extension.dependencyKeys Angular Module that the extension depends upon\n * @param {Object.<string, function>} extension.hooks Function hooks that the extension overrides\n * @param {?Object.<string, function>} extension.events The events the extension wants to react to\n * @param {?Object.<string, function>} extension.helpers View helper functions that will be\n *                                                       available on `scope.ext.helpers` in view\n * @returns {!string} The Angular Module Key for the Extension Module\n */\nfunction createExtensionModule(moduleName, extension) {\n  return angular\n    .module(moduleName, extension.dependencyKeys || [])\n\n    // Make the extension hooks available via the angular injector\n    .value(extensionHooksKey, extension.hooks)\n\n    // Attach event listeners\n    .run([\n      '$filter', eventBusKey, widgetKey, notificationsKey,\n      ($filter, eventBus, widget, notifications) => {\n        const context = {\n          $filter,\n          widget,\n          notifications,\n          publish: eventBus.publish,\n        };\n        const events = (typeof extension.events === 'function')\n          ? extension.events(context)\n          : extension.events || {};\n        Object.keys(events).forEach(event => {\n          eventBus.subscribe(event, events[event]);\n        });\n      }])\n\n    // Make extension view helpers available to the template\n    .run([\n      '$rootScope', '$filter', eventBusKey, widgetKey, notificationsKey,\n      (scope, $filter, eventBus, widget, notifications) => {\n        const context = {\n          $filter,\n          widget,\n          notifications,\n          publish: eventBus.publish,\n        };\n        const helpers = (typeof extension.helpers === 'function')\n          ? extension.helpers(context)\n          : extension.helpers || {};\n\n        // eslint-disable-next-line no-param-reassign\n        scope.ext = { helpers };\n      }])\n\n    .name;\n}\n\n/**\n * Extract the widget enterprise catalog name from the instance name\n *\n * This is used because there does not appear to be a consistent way to get the\n * widget name (as specified in the source model.xml/enterprise catalog) from the\n * wiget instance object.\n *\n * Assumes the format \"<name>_<hash>\" or \"<name>-<numbers>\"\n *\n * @inner\n * @param {string} instanceName The name of the widget instance object\n * @returns {string} The name of the widget in the enterprise catalog\n */\nfunction extractWidgetName(instanceName) {\n  console.warn(\n    'DEPRECATED',\n    'Determining the widgets JS module path based on the widget name is deprecated.'\n    + ' You should specify the module to bootstrap via a `path` property in your model.xml.'\n  );\n  const separatorIndex = instanceName.lastIndexOf('_');\n  if (separatorIndex === -1) {\n    return instanceName.replace(/-\\d+$/, '');\n  }\n  return instanceName.slice(0, separatorIndex);\n}\n\nfunction getLocale(widgetInstance) {\n  if (oldConfigLocale) {\n    console.warn(\n      'DEPRECATED',\n      '`config-bb-locale.currentLocale` is deprecated in favor of `config-bb-locale.locale'\n    );\n    return oldConfigLocale(widgetInstance);\n  }\n  return configLocale(widgetInstance.locale);\n}\n\nfunction getMessageBundleModule(widgetInstance, widget) {\n  if (oldConfigMessageBundleModule) {\n    console.warn(\n      'DEPRECATED',\n      '`config-bb-locale.messageBundleModuleName` is deprecated'\n        + ' in favor of `config-bb-locale.messageBundleModule'\n    );\n    return oldConfigMessageBundleModule(widgetInstance);\n  }\n  return configMessageBundleModule(widget);\n}\n\n/**\n * @name start\n * @type {function}\n * @description Start an Angular Based Widget\n *\n * @param {function} require Used to dynamically load modules\n * @param {WidgetInstance} widgetInstance An instance of the CXP Widget Object (__WIDGET__)\n * @returns {void}\n */\nexport default function start(require, widgetInstance) {\n  const widgetInstanceName = widgetInstance.name || widgetInstance.model.extendedItemName;\n  const widget = bbWidget(widgetInstance, Promise);\n\n  const widgetModuleName = widget.getStringPreference('path')\n        || extractWidgetName(widgetInstanceName);\n  const extensionModuleName = widget.getStringPreference('extension');\n  const locale = getLocale(widgetInstance);\n\n  // Collect the names of the JS modules that are needed to start the widget\n  // { dependencyName: jsModuleName }\n  const requiredModules = {\n    widgetModule: widgetModuleName,\n    configProvidersModule: 'config-bb-providers-ng', // TODO: configurable name\n    extensionModule: extensionModuleName,\n    messageBundleModule: getMessageBundleModule(widgetInstance, widget),\n    localeModule: getLocaleModuleName(locale),\n  };\n\n  // Partition the dependencies map into keys/values (this is the inverse of `_.zipObject`)\n  // eg. { 'a': 1, 'b', 2 } -> [['a', 'b'], [1, 2]]\n  // This is so we can pass the array of jsModuleNames into `require` and build the\n  // { dependencyName: jsModule } mapping once the modules are loaded\n  const [dependencyNames, jsModuleNames] = Object.keys(requiredModules)\n        .filter(key => !!requiredModules[key])\n        .reduce(([ks, vs], key) => [\n          ks.concat([key]),\n          vs.concat([requiredModules[key]]),\n        ], [[], []]);\n\n  require(jsModuleNames, (...args) => {\n    // Build a { dependencyName: jsModule } mapping from the loaded modules (in the args array)\n    const modules = args.reduce((acc, module, index) => {\n      acc[dependencyNames[index]] = module; // eslint-disable-line no-param-reassign\n      return acc;\n    }, {});\n\n    // Collect the NG Module keys\n    const dependencyKeys = [modules.widgetModule.default];\n\n    // `extensionModule` may not be loaded if not in the model\n    if (!!modules.extensionModule) {\n      dependencyKeys.push(createExtensionModule(extensionModuleName, modules.extensionModule));\n    }\n\n    // TODO: Split this function up\n    const appModuleKey = createAppModule(\n      widgetInstanceName,\n      widgetInstance,\n      dependencyKeys,\n      modules.configProvidersModule.default,\n      modules.messageBundleModule,\n      locale\n    );\n\n    // Bootstrap Angular with the Angular App\n    angular.bootstrap(widgetInstance.body, [appModuleKey]);\n  });\n}\n\n/**\n * An AngularJS compatible injectable. Annotated with one of the three available\n * methods described in https://docs.angularjs.org/api/auto/service/$injector.\n * NB. \"inline\" annotation is preferred.\n *\n * @private\n * @typedef NgInjectedFunction\n * @type {array}\n */\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-start-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_18__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-notifications-ng\"\n// module id = 18\n// module chunks = 8","module.exports = __WEBPACK_EXTERNAL_MODULE_19__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 19\n// module chunks = 8 12","module.exports = __WEBPACK_EXTERNAL_MODULE_20__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget\"\n// module id = 20\n// module chunks = 8 13","module.exports = __WEBPACK_EXTERNAL_MODULE_21__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-i18n-ng\"\n// module id = 21\n// module chunks = 8","module.exports = __WEBPACK_EXTERNAL_MODULE_22__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 22\n// module chunks = 8","module.exports = __WEBPACK_EXTERNAL_MODULE_23__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"config-bb-locale\"\n// module id = 23\n// module chunks = 8"],"sourceRoot":""}