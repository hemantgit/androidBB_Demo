{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6********","webpack:///webpack/bootstrap 4d476ef0b5c04992d1c9?b6b6********","webpack:///./lib-bb-storage-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114****","webpack:///./lib-bb-storage-ng/scripts/index.js","webpack:///./lib-bb-storage-ng/scripts/storage.js","webpack:///./lib-bb-storage-ng/scripts/adapters/mobile-sdk.js","webpack:///./lib-bb-storage-ng/scripts/adapters/web/memory.js","webpack:///./lib-bb-storage-ng/scripts/adapters/web.js"],"names":["moduleKey","bbStorageServiceKey","sessionStorageAvailable","storage","window","sessionStorage","x","setItem","removeItem","e","detectStorage","Promise","cxp","mobile","plugins","InMemoryStorage","module","factory","name","parseValue","value","JSON","parse","adapter","key","stringify","getItem","then","subscribe","callback","changedKey","oldValue","newValue","plugin","resolve","reject","item","wrapped","unsubscribe","data","Object","prototype","hasOwnProperty","call","subscriptions","subscriptionsFor","notify","forEach","filter","fn"],"mappings":"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","file":"lib-bb-storage-ng/scripts/lib-bb-storage-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"lib-bb-storage-ng\", [\"vendor-bb-angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lib-bb-storage-ng\"] = factory(require(\"vendor-bb-angular\"));\n\telse\n\t\troot[\"lib-bb-storage-ng\"] = factory(root[\"vendor-bb-angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_5__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4d476ef0b5c04992d1c9","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib-bb-storage-ng/model.xml\n// module id = 0\n// module chunks = 9","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 5\n// module chunks = 3 4 5 7 8 9 13","/* global window */\n/**\n * @module lib-bb-storage-ng\n * @description\n * Provides a cross-platform interface for temporary storage or data between widget/page instances.\n * It provides a key-value store that is persisted between Page loads in the browser and between\n * WebViews on mobile.\n *\n * @example\n * import bbStorageModuleKey, { bbStorageServiceKey } from 'lib-bb-storage-ng';\n *\n * angular\n *   .module('ExampleModule', [\n *     bbStorageModuleKey,\n *   ])\n *   .controller('MyController', [\n *     bbStorageServiceKey,\n *     // into //\n *     (bbStorage) => {\n *       const $ctrl = this;\n *       let unsubscribe = () => {};\n *\n *       const counterStorage = 'counter';\n *\n *       $ctrl.$onInit = () => {\n *         unsubscribe = bbStorage.subscribe(counterStorage, (newValue) => {\n *           // called whenever the value in the storage is set\n *           $ctrl.counter = newValue;\n *         });\n *       };\n *\n *       $ctrl.$onDestroy = () => {\n *         unsubscribe();\n *       };\n *\n *       $ctrl.increment = () =>\n *         bbStorage.getItem(counterStorage)\n *         .then((oldValue = 0) => bbStorage.setItem(counterStorage, oldValue + 1));\n *     },\n *   ]);\n */\n\nimport angular from 'vendor-bb-angular';\n\nimport bbStorageService from './storage';\nimport mobileSdkAdapter from './adapters/mobile-sdk';\nimport memoryDataAdapter from './adapters/web/memory';\nimport webAdapter from './adapters/web';\n\nconst moduleKey = 'lib-bb-storage';\n\n/**\n * @name bbStorageServiceKey\n * @type {string}\n * @description Injector name for a [bbStorageService](#bbStorageService)\n */\nexport const bbStorageServiceKey = `${moduleKey}:bbStorageService`;\n\n/**\n * Detect if session storage is available\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Testing_for_support_vs_availability\n * @inner\n * @type {function}\n * @return {bool} True if session storage is available\n */\nconst sessionStorageAvailable = () => {\n  try {\n    const storage = window.sessionStorage;\n    const x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Attempt to choose the correct storage adapter\n *\n * @name detectStorage\n * @inner\n * @type {function}\n * @param {Promise} Promise A promise constructor\n * @return {StorageAdapter} The adapter suitable for the current environment\n */\nconst detectStorage = (Promise) => {\n  if (window.cxp && window.cxp.mobile && window.cxp.mobile.plugins\n      && window.cxp.mobile.plugins.InMemoryStorage) {\n    return mobileSdkAdapter(Promise, window.cxp.mobile.plugins.InMemoryStorage);\n  }\n  if (sessionStorageAvailable()) {\n    return webAdapter(Promise, window.sessionStorage);\n  }\n  return webAdapter(Promise, memoryDataAdapter());\n};\n\n/**\n * @name default\n * @type {string}\n * @description The angular module name\n */\nexport default angular.module(moduleKey, [])\n\n  /**\n   * The [Storage Service](#StorageService) factory.\n   * Creates a new storage service by detecting the best storage mechanism available in the\n   * current environment.\n   *\n   * @name bbStorageService\n   * @ngkey lib-bb-storage-ng:bbStorageService\n   * @type {function}\n   * @return {StorageService}\n   */\n  .factory(bbStorageServiceKey, [\n    '$q',\n    (Promise) => bbStorageService(detectStorage(Promise)),\n  ])\n  .name;\n\n/**\n * @typedef StorageAdapter\n * @inner\n * @type {object}\n */\n/**\n * @typedef StorageAdapter#getItem\n * @inner\n * @type {function}\n * @param {string} key The key to fetch\n * @return {Promise.<?string>} The serialized value stored in the key, if any\n */\n/**\n * @typedef StorageAdapter#setItem\n * @inner\n * @type {function}\n * @param {string} key The key to set\n * @param {string} value The value to store - should be serialized JSON\n * @return {Promise.<void>}\n */\n/**\n * @typedef StorageAdapter#removeItem\n * @inner\n * @type {function}\n * @param {string} key The key to remove\n * @return {Promise.<void>}\n */\n/**\n * @typedef StorageAdapter#subscribe\n * @inner\n * @type {function}\n * @param {string} key The key to subscribe to\n * @param {AdapterSubscription} callback The callback for when the value changes\n * @return {AdapterUnsubscribe}\n */\n/**\n * @typedef AdapterUnsubscribe\n * @inner\n * @description Unsubscribe from notifications\n * @type {function}\n * @return {void}\n */\n/**\n * @typedef AdapterSubscription\n * @inner\n * @type {function}\n * @param {string} key The key that changed\n * @param {string} oldValue The previous value attached to the key\n * @param {string} newValue The new value attached to the key\n * @return {void}\n */\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-storage-ng/scripts/index.js","/**\n * @name default\n * @inner\n * @type {function}\n * @param {StorageAdapter} adapter An adapter for the underlying storage mechanism\n * @return {StorageService}\n */\n\n/**\n * Attempt to parse a JSON value\n * @name parseValue\n * @inner\n * @type {function}\n * @param {string} value The JSON encoded value\n * @return {any|null} The parsed value, or null if parsing fails\n */\nconst parseValue = (value) => {\n  try {\n    return JSON.parse(value);\n  } catch (e) {\n    return null;\n  }\n};\n\n/**\n * A service that provides a consistent interface allowing setting and getting persistent data\n * via some underlying (platform specific) storage mechanism\n *\n * @name StorageService\n * @type {object}\n */\nexport default (adapter) => ({\n  /**\n   * @name StorageService#setItem\n   * @type {function}\n   * @param {string} key The key to set\n   * @param {any} value The value to store - must be serializable to JSON\n   * @return {Promise.<void>}\n   */\n  setItem: (key, value) =>\n    adapter.setItem(key, JSON.stringify(value)),\n\n  /**\n   * @name StorageService#getItem\n   * @type {function}\n   * @param {string} key The key to fetch\n   * @return {Promise.<any>} The value stored in the key, if any (null if key holds invalid JSON)\n   */\n  getItem: (key) =>\n    adapter.getItem(key).then(parseValue),\n\n  /**\n   * @name StorageService#removeItem\n   * @type {function}\n   * @param {string} key The key to remove\n   * @return {Promise.<void>}\n   */\n  removeItem: (key) =>\n    adapter.removeItem(key),\n\n  /**\n   * @name StorageService#subscribe\n   * @type {function}\n   * @param {string} key The key to subscribe to\n   * @param {Subscription} callback The callback to be called with the new value of the key\n   * @return {Unsubscribe}\n   */\n  subscribe: (key, callback) =>\n    adapter.subscribe(key, (changedKey, oldValue, newValue) => {\n      if (key === changedKey && oldValue !== newValue) {\n        callback(parseValue(newValue));\n      }\n    }),\n});\n\n/**\n * @typedef Unsubscribe\n * @description Unsubscribe from notifications\n * @type {function}\n * @return {void}\n */\n/**\n * @typedef Subscription\n * @type {function}\n * @param {any} newValue The new value attached to the key\n * @return {void}\n */\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-storage-ng/scripts/storage.js","/**\n * @name mobileSdkAdapter\n * @inner\n * @see https://my.backbase.com/docs/product-documentation/documentation//mobile-sdk/latest/in_memory_storage.html\n * @type {function}\n * @param {Promise} Promise A Promise constructor\n * @param {object} plugin An instance of the CXP Mobile SDK Storage plugin\n * @return {StorageAdapter}\n */\nexport default (Promise, plugin) => ({\n  setItem: (key, value) => new Promise((resolve, reject) => {\n    plugin.setItem(\n      () => { resolve(); },\n      reject, key, value\n    );\n  }),\n\n  getItem: (key) => new Promise((resolve, reject) => {\n    plugin.getItem(\n      (item) => { resolve(item); },\n      reject, key\n    );\n  }),\n\n  removeItem: (key) => new Promise((resolve, reject) => {\n    plugin.removeItem(\n      () => { resolve(); },\n      reject, key\n    );\n  }),\n\n  subscribe: (key, callback) => {\n    const wrapped = ({ key: changedKey, oldValue, newValue }) => {\n      if (changedKey === key) {\n        callback(key, oldValue, newValue);\n      }\n    };\n    plugin.subscribe(wrapped);\n    return () => {\n      plugin.unsubscribe(wrapped);\n    };\n  },\n});\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-storage-ng/scripts/adapters/mobile-sdk.js","/**\n * @name memoryAdapter\n * @inner\n * @type {function}\n * @return {SynchronousDataAdapter}\n */\nexport default () => {\n  const data = {};\n  return {\n    getItem: key => (Object.prototype.hasOwnProperty.call(data, key) ? data[key] : null),\n    setItem: (key, value) => { data[key] = value; },\n    removeItem: (key) => { delete data[key]; },\n  };\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-storage-ng/scripts/adapters/web/memory.js","/**\n * @name webStorageAdapter\n * @inner\n * @type {function}\n * @param {Promise} Promise A Promise constructor\n * @param {SynchronousDataAdapter} data A data adapter\n * @return {StorageAdapter}\n */\nexport default (Promise, data) => {\n  const subscriptions = {};\n\n  const subscriptionsFor = (key) => subscriptions[key] || [];\n\n  const notify = (key, oldValue, newValue) => {\n    subscriptionsFor(key).forEach((callback) => {\n      callback(key, oldValue, newValue);\n    });\n  };\n\n  return {\n    setItem: (key, newValue) => new Promise((resolve) => {\n      const oldValue = data.getItem(key);\n      data.setItem(key, newValue);\n      notify(key, oldValue, newValue);\n      resolve();\n    }),\n\n    getItem: (key) => Promise.resolve(data.getItem(key)),\n\n    removeItem: (key) => new Promise((resolve) => {\n      const oldValue = data.getItem(key);\n      data.removeItem(key);\n      notify(key, oldValue, null);\n      resolve();\n    }),\n\n    subscribe: (key, callback) => {\n      subscriptions[key] = [...subscriptionsFor(key), callback];\n      return () => {\n        subscriptions[key] = subscriptionsFor(key).filter(fn => fn !== callback);\n      };\n    },\n  };\n};\n\n/**\n * @typedef SynchronousDataAdapter\n * @inner\n * @type {object}\n */\n/**\n * @typedef SynchronousDataAdapter#getItem\n * @inner\n * @type {function}\n * @param {string} key The key to fetch\n * @return {?string} The serialized value stored in the key, if any\n */\n/**\n * @typedef SynchronousDataAdapter#setItem\n * @inner\n * @type {function}\n * @param {string} key The key to set\n * @param {string} value The value to store - should be serialized JSON\n * @return {void}\n */\n/**\n * @typedef SynchronousDataAdapter#removeItem\n * @inner\n * @type {function}\n * @param {string} key The key to remove\n * @return {void}\n */\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-storage-ng/scripts/adapters/web.js"],"sourceRoot":""}