{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6**********","webpack:///webpack/bootstrap 4d476ef0b5c04992d1c9?b6b6**********","webpack:///./lib-bb-widget/model.xml","webpack:///./lib-bb-widget/scripts/index.js","webpack:///./lib-bb-widget/scripts/widget.js","webpack:///./lib-bb-widget/scripts/parse-preference.js","webpack:///./lib-bb-widget/scripts/adapters.js","webpack:///./lib-bb-widget/scripts/context-root.js"],"names":["widgetInstance","Promise","Parse","widget","contextRoot","getPreference","name","console","warn","getStringPreference","str","toString","undefined","replace","getLongPreference","toLong","getDoublePreference","toDouble","getBooleanPreference","toBoolean","getStringArrayPreference","toStringArray","getNullPreference","toNull","getRawPreference","setPreference","value","savePreference","saveModel","resolve","getId","id","isString","String","whenNot","pred","parser","input","whenNotNull","whenNotInteger","Number","isInteger","whenNotBoolean","whenNotNumber","whenNotString","coerceOrParse","coerce","parse","trim","parseInt","parseFloat","Array","isArray","map","split","item","v5Adapter","f","model","save","v6Adapter","preferences","getItem","setItem","v6ContextRoot","features","cxp","config","get","v5ContextRoot","window","b$","portal","resourceRoot"],"mappings":"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","file":"lib-bb-widget/scripts/lib-bb-widget.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"lib-bb-widget\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lib-bb-widget\"] = factory();\n\telse\n\t\troot[\"lib-bb-widget\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4d476ef0b5c04992d1c9","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib-bb-widget/model.xml\n// module id = 0\n// module chunks = 11","/**\n * @module lib-bb-widget\n *\n * @description\n * Provides access to the details of the instance of the widget in the\n * portal, such as its ID and preferences.\n *\n * @example\n * // file: index.js\n * import bbWidget from 'lib-bb-widget';\n *\n * const widget = bbWidget(widgetInstance);\n * widget.getPreference('foo');\n *\n */\nimport widget from './widget';\nimport adapter from './adapters';\nimport contextRoot from './context-root';\n\nexport default (widgetInstance, Promise) =>\n  widget(adapter(widgetInstance), contextRoot(widgetInstance), Promise);\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-widget/scripts/index.js","import * as Parse from './parse-preference';\n\n/**\n * @name default\n * @inner\n * @type {Object}\n * @param {WidgetAdapter} widget A widget instance adapter\n * @param {string} contextRoot The portal context root\n * @param {Promise} Promise An ES2015 compliant promise\n * @returns {Widget} The widget service\n */\nexport default (widget, contextRoot, Promise) => ({\n  /**\n   * A service that provides access to the instance of the widget in the portal.\n   *\n   * @name Widget\n   * @type {object}\n   */\n\n  /**\n   * Gets a preference from widget configuration (model.xml) and attempts to return it as a string\n   *\n   * *DEPRECATED*\n   * `getPreference` is deprecated in favor of the type specific `get<Type>Preference` methods.\n   * This makes the use of the preferences in the context of a widget more reliable, as they are\n   * parsed/coerced into the expected type in a reliable and consistent way, instead of ad-hoc\n   * whenever a preference is used.\n   *\n   * @name Widget#getPreference\n   * @deprecated 0.2.3\n   * @type {function}\n   * @param {string} name\n   * @returns {?string} The parsed value of the preference\n   */\n  getPreference: (name) => {\n    console.warn( // eslint-disable-line no-console\n      '`getPreference` is deprecated - use the type specific `get<Type>Preference` method instead.'\n    );\n    return widget.getPreference(name);\n  },\n\n  /**\n   * Gets a preference from widget configuration (model.xml) and attempts to return it as a string\n   *\n   * @name Widget#getStringPreference\n   * @type {function}\n   * @param {string} name\n   * @returns {?string} The parsed value of the preference\n   */\n  getStringPreference: (name) => {\n    const str = Parse.toString(widget.getPreference(name));\n    return (str === undefined) ? str : str\n      .replace('$(contextRoot)', contextRoot);\n  },\n\n  /**\n   * Gets a preference from widget configuration (model.xml) and attempts to return it as a integer\n   * number.\n   *\n   * @name Widget#getLongPreference\n   * @type {function}\n   * @param {string} name\n   * @returns {?number} The parsed value of the preference\n   */\n  getLongPreference: (name) =>\n    Parse.toLong(widget.getPreference(name)),\n\n  /**\n   * Gets a preference from widget configuration (model.xml) and attempts to return it as a decimal\n   * number.\n   *\n   * @name Widget#getDoublePreference\n   * @type {function}\n   * @param {string} name\n   * @returns {?number} The parsed value of the preference\n   */\n  getDoublePreference: (name) =>\n    Parse.toDouble(widget.getPreference(name)),\n\n  /**\n   * Gets a preference from widget configuration (model.xml) and attempts to return it as a boolean.\n   *\n   * @name Widget#getBooleanPreference\n   * @type {function}\n   * @param {string} name\n   * @returns {?boolean} The parsed value of the preference\n   */\n  getBooleanPreference: (name) =>\n    Parse.toBoolean(widget.getPreference(name)),\n\n  /**\n   * Gets a preference from widget configuration (model.xml) and attempts to return it as an array\n   * of strings, split on commas.\n   *\n   * @name Widget#getStringArrayPreference\n   * @type {function}\n   * @param {string} name\n   * @returns {?Array.<string>} The parsed value of the preference\n   */\n  getStringArrayPreference: (name) =>\n    Parse.toStringArray(widget.getPreference(name)),\n\n  /**\n   * Gets a preference from widget configuration (model.xml) and attempts to return it as an null.\n   *\n   * @name Widget#getNullPreference\n   * @type {function}\n   * @param {string} name\n   * @returns {?null} The parsed value of the preference\n   */\n  getNullPreference: (name) =>\n    Parse.toNull(widget.getPreference(name)),\n\n  /**\n   * Gets a preference from widget as returned by portal client. This method is provided\n   * as a \"escape hatch\" when none of the types methods work, but should generally be\n   * avoided in common use due to its reliance on the underlying portal client implementation.\n   *\n   * *N.B.* The return type is dependant on the underlying portal client implementation, and may\n   * change across portal client versions.\n   *\n   * @name Widget#getRawPreference\n   * @type {function}\n   * @param {string} name\n   * @returns {any} The value of the preference directly from the portal client\n   */\n  getRawPreference: (name) =>\n    widget.getPreference(name),\n\n  /**\n   * Sets a given value for a given preference\n   *\n   * *DEPRECATED*\n   * `setPreference` is deprecated in favor of `savePreference` which also persists the value to\n   * the portal.\n   *\n   * @name Widget#setPreference\n   * @deprecated 1.1.0\n   * @type {function}\n   * @param {string} name\n   * @param {string} value\n   * @returns {object|string} preference\n   */\n  setPreference: (name, value) => {\n    console.warn( // eslint-disable-line no-console\n      '`setPreference` is deprecated - use `savePreference` to set and persist the preference'\n    );\n    return widget.setPreference(name, value);\n  },\n\n  /**\n   * Sets a given value for a given preference and persists it to the portal.\n   *\n   * @name Widget#savePreference\n   * @since 1.1.0\n   * @type {function}\n   * @param {string} name\n   * @param {string} value\n   * @returns {Promise.<void>}\n   */\n  savePreference: (name, value) => new Promise(resolve => {\n    widget.setPreference(name, value);\n    widget.saveModel(() => { resolve(); });\n  }),\n\n  /**\n   * @name Widget#getId\n   * @type {function}\n   * @description Returns the widget's instance ID\n   * @returns {string}\n   */\n  getId: () => widget.id,\n});\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-widget/scripts/widget.js","const isString = (str) => (typeof str === 'string' || str instanceof String);\n\nconst whenNot = (pred) => (parser) => (input) =>\n        (pred(input) ? input : parser(input));\n\nconst whenNotNull = (parser) => (input) =>\n        ((input === undefined || input === null) ? undefined : parser(input));\n\nconst whenNotInteger = whenNot(Number.isInteger);\nconst whenNotBoolean = whenNot(input => typeof input === 'boolean');\nconst whenNotNumber = whenNot(input => typeof input === 'number');\nconst whenNotString = whenNot(isString);\n\nconst coerceOrParse = (coerce, parse) => (input) =>\n        (isString(input) ? parse(input) : coerce(input));\n\nexport const toBoolean = whenNotNull(whenNotBoolean(coerceOrParse(\n  (input) => !!input,\n  (input) => {\n    if (input.trim() === 'true') {\n      return true;\n    }\n    if (input.trim() === 'false') {\n      // this case isn't needed, the parseInt will catch it, but explicit is better than implicit\n      return false;\n    }\n    return parseInt(input, 10) > 0;\n  }\n)));\n\nexport const toLong = whenNotNull(whenNotInteger(coerceOrParse(\n  (input) => parseInt(Number(input), 10),\n  (input) => parseInt(input, 10)\n)));\n\nexport const toDouble = whenNotNull(whenNotNumber(coerceOrParse(\n  (input) => Number(input),\n  (input) => parseFloat(input)\n)));\n\nexport const toString = whenNotNull(whenNotString((input) => input.toString()));\n\nexport const toStringArray = whenNotNull(\n  (input) => ((Array.isArray(input)) ?\n             input.map(toString) :\n             input.split(',').map(item => item.trim()))\n);\n\nexport const toNull = whenNotNull(() => null);\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-widget/scripts/parse-preference.js","/**\n * @name v5Adapter\n * @type {function}\n * @inner\n * @param {Object} widgetInstance The Portal Widget Instance (a.k.a. `__WIDGET__`)\n * @return {WidgetAdapter} An adapter for a portal client v5 widget instance\n */\nexport const v5Adapter = (widgetInstance) => ({\n  id: widgetInstance.id,\n  getPreference: name => widgetInstance.getPreference(name),\n  setPreference: (name, value) => widgetInstance.setPreference(name, value),\n  saveModel: (f) => widgetInstance.model.save(f),\n});\n\n/**\n * @name v6Adapter\n * @type {function}\n * @inner\n * @param {Object} widgetInstance The Portal Widget Instance (a.k.a. `__WIDGET__`)\n * @return {WidgetAdapter} An adapter for a portal client v6 widget instance\n */\nexport const v6Adapter = (widgetInstance) => ({\n  id: widgetInstance.id,\n  getPreference: name => widgetInstance.preferences.getItem(name),\n  setPreference: (name, value) => widgetInstance.preferences.setItem(name, value),\n  saveModel: f => f(),\n});\n\n/**\n * @name adapter\n * @type {function}\n * @inner\n * @param {Object} widgetInstance The Portal Widget Instance (a.k.a. `__WIDGET__`)\n * @return {WidgetAdapter} An adapter for the detected portal client version\n */\nexport default (widgetInstance) =>\n  (widgetInstance.preferences\n   ? v6Adapter(widgetInstance)\n   : v5Adapter(widgetInstance));\n\n/**\n * @typedef WidgetAdapter\n * @type {Object}\n * @prop {string} id The widget instance's unique identifier\n * @prop {GetPreference} getPreference Get the named preference\n * @prop {SetPreference} setPreference Set the names preference to value\n * @prop {SaveModel} saveModel Persist the updated model preference values if required\n * @prop {string} contextRoot The root path of the current portal/experience context\n */\n\n/**\n * @typedef GetPreference\n * @type {function}\n * @param {string} name The name of the preference to get\n * @return {string|undefined} The current value of the requested preference\n */\n\n/**\n * @typedef SetPreference\n * @type {function}\n * @param {string} name The name of the preference to set\n * @param {any} value The value to set the current preference to\n * @return {any} The new value of the preference\n */\n\n/**\n * @typedef SaveModel\n * @description Persist the updated model preference values if required\n * @type {function}\n * @param {function} callback The callback to be called once any preferences are persisted\n * @return {void}\n */\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-widget/scripts/adapters.js","const v6ContextRoot = (widgetInstance) => widgetInstance.features &&\n      widgetInstance.features.cxp &&\n      widgetInstance.features.cxp.config.get &&\n      widgetInstance.features.cxp.config.get('contextRoot');\n\n/* global window */\nconst v5ContextRoot = () => window.b$ &&\n      window.b$.portal &&\n      window.b$.portal.config &&\n      window.b$.portal.config.resourceRoot;\n\nexport default (widgetInstance) => v6ContextRoot(widgetInstance) || v5ContextRoot();\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-widget/scripts/context-root.js"],"sourceRoot":""}