{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///webpack/bootstrap 2990f54522f565c4fd41?4c34","webpack:///./config-bb-locale/model.xml","webpack:///./config-bb-locale/scripts/index.js"],"names":["locale","currentLocale","document","documentElement","lang","getAttribute","localeModuleName","toLowerCase","messageBundleModule","extensionModuleName","widget","getStringPreference"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA,yC;;;;;;;;;;;ACAA;AACA;;;;;;;;;;AAUA;;;;;;;;;;AAUO,KAAMA,0BAAS,SAATA,MAAS;AAAA,UAAiBC,iBAClCC,SAASC,eAAT,CAAyBC,IADS,IAElCF,SAASC,eAAT,CAAyBE,YAAzB,CAAsC,UAAtC,CAFiB;AAAA,EAAf;;AAIP;;;;;;;;;;AAUO,KAAMC,8CAAmB,SAAnBA,gBAAmB;AAAA,UAAiBL;AAC/C;AACCA,iBAAcM,WAAd,OAAgC,OAAhC,GACE,IADF,+CAE4CN,cAAcM,WAAd,EAF5C,QAF8C,CAAjB;AAAA,EAAzB;;AAMP;;;;;;;;;AASO,KAAMC,oDAAsB,SAAtBA,mBAAsB,SAAU;AAC3C,OAAMC,sBAAsBC,OAAOC,mBAAP,CAA2B,WAA3B,CAA5B;AACA,UAAOD,OAAOC,mBAAP,CAA2B,UAA3B,MACJ,CAAC,CAACF,mBAAF,GAA2BA,mBAA3B,6BAAwE,IADpE,CAAP;AAED,EAJM,C","file":"config-bb-locale/scripts/config-bb-locale.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"config-bb-locale\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"config-bb-locale\"] = factory();\n\telse\n\t\troot[\"config-bb-locale\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2990f54522f565c4fd41","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./config-bb-locale/model.xml\n// module id = 0\n// module chunks = 0","/* global document */\n/**\n * @module config-bb-locale\n * @description Configuration module for localization and translation.\n *\n * This configuration module is intended to be replaced and overwritten per project. It is used\n * by lib-bb-start-ng to bootstrap the localisation settings for the widget.\n *\n * When replacing this config, please ensure the functions below are implemented.\n */\n\n/**\n * @name locale\n * @description Return which locale should be used. By default it uses the locale provided by the\n *   portal client widget instance (to be compatible with CXP 6) and falls back to reading the lang\n *   or xml:lang from the document. This allows custom pages in CXP to configure the locale from the\n *   server-side.\n * @type {function}\n * @param {string} currentLocale The locale identifier, determined by portal client (if available)\n * @return {?string} The locale identifier\n */\nexport const locale = currentLocale => currentLocale\n  || document.documentElement.lang\n  || document.documentElement.getAttribute('xml:lang');\n\n/**\n * @name localeModuleName\n * @description Returns the name of the angular locale module to load\n *   to be loaded during widget startup. This module does not need to export anything, but can\n *   configure the local environment with the relevant locale - by default it will load the\n *   relevant angular ngLocale module for the selected locale.\n * @type {function}\n * @param {string} currentLocale The locale identifier, determined by portal client (if available)\n * @return {?string} The module to load to setup the locale\n */\nexport const localeModuleName = currentLocale => currentLocale &&\n  // default implementation does not load any module for \"en-us\" as it is build into core angular\n  (currentLocale.toLowerCase() === 'en-us'\n   ? null\n   : `config-bb-locale/assets/angular-locale_${currentLocale.toLowerCase()}.js`);\n\n/**\n * @name messageBundleModule\n * @description Returns the name of a module that contains the message bundle with the needed\n * translations. By default it will load the assets/messages.json from the widget's extension. This\n * can be customized by setting a messages preference on the widget pointing to the relevant module.\n * @type {function}\n * @param {module:lib-bb-widget.BBWidget} widget The current widget\n * @return {?string} The module to load to provide the message bundle\n */\nexport const messageBundleModule = widget => {\n  const extensionModuleName = widget.getStringPreference('extension');\n  return widget.getStringPreference('messages') ||\n    (!!extensionModuleName ? `${extensionModuleName}/assets/messages.json` : null);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./config-bb-locale/scripts/index.js"],"sourceRoot":""}